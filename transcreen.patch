Index: nanodlna/devices.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nanodlna/devices.py b/nanodlna/devices.py
--- a/nanodlna/devices.py	
+++ b/nanodlna/devices.py	(date 1732168366002)
@@ -108,3 +108,230 @@
     except Exception as e:
         logging.error(f"Error registering device at {location_url}: {e}")
         return None
+
+# streaming.py
+
+import os
+import socket
+import threading
+import logging
+from http.server import SimpleHTTPRequestHandler, HTTPServer
+from functools import partial
+
+def start_server(files, serve_ip, serve_port=8000):
+    logging.debug("Starting streaming server")
+
+    # Serve files from a temporary directory
+    import tempfile
+    temp_dir = tempfile.TemporaryDirectory()
+    for filename, filepath in files.items():
+        os.symlink(os.path.abspath(filepath), os.path.join(temp_dir.name, filename))
+
+    # Use a custom handler that serves files from temp_dir
+    handler = partial(SimpleHTTPRequestHandler, directory=temp_dir.name)
+
+    # Try to bind to the specified port, increment if it's in use
+    max_tries = 100
+    for i in range(max_tries):
+        try:
+            httpd = HTTPServer((serve_ip, serve_port + i), handler)
+            actual_port = serve_port + i
+            break
+        except OSError as e:
+            if e.errno == 48:  # Address already in use
+                logging.debug(f"Port {serve_port + i} in use, trying next port")
+                continue
+            else:
+                raise
+    else:
+        logging.error(f"Could not find an available port after {max_tries} attempts")
+        temp_dir.cleanup()
+        raise OSError("No available port found for the HTTP server")
+
+    # Store temp_dir in httpd to keep it alive
+    httpd.temp_dir = temp_dir
+
+    server_thread = threading.Thread(target=httpd.serve_forever)
+    server_thread.daemon = True
+    server_thread.start()
+
+    logging.info(f"Serving at http://{serve_ip}:{actual_port}/")
+
+    # Build URLs
+    files_urls = {}
+    for filename in files.keys():
+        files_urls[filename] = f"http://{serve_ip}:{actual_port}/{filename}"
+
+    return files_urls, httpd
+
+def stop_server(httpd):
+    logging.debug("Stopping streaming server")
+    httpd.shutdown()
+    httpd.server_close()
+    httpd.temp_dir.cleanup()
+
+def get_serve_ip(target_ip):
+    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
+    try:
+        s.connect((target_ip or '8.8.8.8', 80))
+        ip = s.getsockname()[0]
+    except Exception:
+        ip = '127.0.0.1'
+    finally:
+        s.close()
+    return ip
+# cli.py
+
+import argparse
+import json
+import os
+import sys
+import signal
+import logging
+import time
+from tqdm import tqdm
+import threading
+
+# Import your modules using relative imports
+from . import devices
+from . import streaming
+from . import dlna
+
+def set_logs(args):
+    # Set up logging
+    log_level = logging.DEBUG if args.debug_activated else logging.INFO
+    logging.basicConfig(
+        level=log_level,
+        format='[ %(asctime)s ] %(levelname)s : %(message)s',
+        datefmt='%Y-%m-%d %H:%M:%S',
+        handlers=[
+            logging.StreamHandler(sys.stdout)
+        ]
+    )
+
+def play(args):
+    set_logs(args)
+    logging.info("Starting to play")
+
+    # Load configuration
+    if args.config_file:
+        with open(args.config_file, "r") as f:
+            devices_config = json.load(f)
+    else:
+        sys.exit("Config file is required for batch play")
+
+    # Start the streaming server
+    files = {}
+    for config_item in devices_config:
+        video_file = config_item["video_file"]
+        if not os.path.exists(video_file):
+            logging.error(f"Video file '{video_file}' does not exist.")
+            sys.exit(1)
+        files[os.path.basename(video_file)] = video_file
+
+    target_ip = None  # Assuming devices are on the same network
+    serve_ip = args.local_host if args.local_host else streaming.get_serve_ip(target_ip)
+    serve_port = 8000  # Starting port
+
+    files_urls, httpd = streaming.start_server(files, serve_ip, serve_port)
+    logging.info("Streaming server ready")
+
+    # Set up signal handlers
+    def signal_handler(sig, frame):
+        logging.info("Interrupt signal detected")
+        streaming.stop_server(httpd)
+        sys.exit(0)
+    signal.signal(signal.SIGINT, signal_handler)
+    signal.signal(signal.SIGTERM, signal_handler)
+
+    # Discover devices
+    logging.debug("Starting device discovery")
+    discovered_devices = devices.get_devices(timeout=5, local_ip=serve_ip)
+    logging.debug(f"Discovered devices: {discovered_devices}")
+
+    # Play videos on devices
+    threads = []
+    for config_item in devices_config:
+        device_name = config_item["device_name"]
+        video_file = config_item["video_file"]
+        loop = args.loop
+
+        # Find the device
+        device = next((d for d in discovered_devices if d["friendly_name"] == device_name), None)
+        if not device:
+            logging.error(f"Device '{device_name}' not found.")
+            continue
+
+        # Get the URL for the video file
+        file_basename = os.path.basename(video_file)
+        file_url = files_urls.get(file_basename)
+        if not file_url:
+            logging.error(f"URL for video file '{video_file}' not found.")
+            continue
+
+        # Start playing the video on the device
+        logging.info(f"Attempting to play video '{video_file}' on device '{device_name}'")
+        t = threading.Thread(target=play_video_on_device, args=(video_file, file_url, device, loop))
+        t.start()
+        threads.append(t)
+
+    # Wait for all threads to finish
+    for t in threads:
+        t.join()
+
+    # Cleanup
+    streaming.stop_server(httpd)
+    logging.info("Stopped streaming server")
+
+def play_video_on_device(video_file, file_url, device, loop):
+    files_urls = {"file_video": file_url}
+    dlna.play(files_urls, device, None)
+    logging.info(f"Video '{video_file}' started playing on device '{device['friendly_name']}'")
+
+    # Get video duration
+    duration = dlna.get_video_duration(video_file)
+    if duration is None:
+        logging.error(f"Could not get duration for video '{video_file}'")
+        return
+
+    # Show progress bar
+    with tqdm(total=duration, desc=f"Playing {os.path.basename(video_file)} on {device['friendly_name']}") as pbar:
+        start_time = time.time()
+        while True:
+            elapsed = time.time() - start_time
+            pbar.update(elapsed - pbar.n)
+            if elapsed >= duration:
+                if loop:
+                    start_time = time.time()
+                    pbar.reset()
+                    dlna.play(files_urls, device, None)
+                    logging.info(f"Video '{video_file}' restarted on device '{device['friendly_name']}'")
+                else:
+                    break
+            time.sleep(1)
+
+def main():
+    parser = argparse.ArgumentParser(description="NanoDLNA Command Line Interface")
+    parser.add_argument("-b", "--debug", dest="debug_activated", action="store_true", help="Activate debug mode.")
+    parser.add_argument("-l", "--local-host", dest="local_host", help="Local IP address to use for serving files.")
+
+    subparsers = parser.add_subparsers()
+
+    # Play command
+    p_play = subparsers.add_parser('play')
+    p_play.add_argument("-c", "--config-file", required=False, help="Path to the config file for video and device information")
+    p_play.add_argument("-d", "--device", dest="device_url")
+    p_play.add_argument("-q", "--query-device", dest="device_query")
+    p_play.add_argument("--loop", action="store_true", help="Loop the video.")
+    p_play.set_defaults(func=play)
+
+    args = parser.parse_args()
+
+    if hasattr(args, 'func'):
+        args.func(args)
+    else:
+        parser.print_help()
+
+def run():
+    main()
+
Index: nanodlna/streaming.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nanodlna/streaming.py b/nanodlna/streaming.py
--- a/nanodlna/streaming.py	
+++ b/nanodlna/streaming.py	(date 1732165306128)
@@ -18,7 +18,24 @@
 
     # Use a custom handler that serves files from temp_dir
     handler = partial(SimpleHTTPRequestHandler, directory=temp_dir.name)
-    httpd = HTTPServer((serve_ip, serve_port), handler)
+
+    # Try to bind to the specified port, increment if it's in use
+    max_tries = 100
+    for i in range(max_tries):
+        try:
+            httpd = HTTPServer((serve_ip, serve_port + i), handler)
+            actual_port = serve_port + i
+            break
+        except OSError as e:
+            if e.errno == 48:  # Address already in use
+                logging.debug(f"Port {serve_port + i} in use, trying next port")
+                continue
+            else:
+                raise
+    else:
+        logging.error(f"Could not find an available port after {max_tries} attempts")
+        temp_dir.cleanup()
+        raise OSError("No available port found for the HTTP server")
 
     # Store temp_dir in httpd to keep it alive
     httpd.temp_dir = temp_dir
@@ -27,12 +44,12 @@
     server_thread.daemon = True
     server_thread.start()
 
-    logging.info(f"Serving at http://{serve_ip}:{serve_port}/")
+    logging.info(f"Serving at http://{serve_ip}:{actual_port}/")
 
     # Build URLs
     files_urls = {}
     for filename in files.keys():
-        files_urls["file_video"] = f"http://{serve_ip}:{serve_port}/{filename}"
+        files_urls[filename] = f"http://{serve_ip}:{actual_port}/{filename}"
 
     return files_urls, httpd
 
